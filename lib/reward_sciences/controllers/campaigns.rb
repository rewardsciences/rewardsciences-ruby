# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module RewardSciences
  class Campaigns < BaseController
    @@instance = Campaigns.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # List all the available campaigns.
    # @param [Integer] limit Optional parameter: The number of campaigns you want to be retrieved.
    # @param [Integer] offset Optional parameter: The number of campaigns you want to skip before starting the retrieval.
    # @return Mixed response from the API call
    def list(limit = 25, offset = 0)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/campaigns'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'limit' => limit,
        'offset' => offset
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'Authorization' => 'Bearer %s' % (Configuration.o_auth_access_token)
      }

      # Create the HttpRequest object for the call
      _request = @http_client.get _query_url, headers: _headers

      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body) if not (_response.raw_body.nil? or _response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # Create a campaign.
    def create(
        name,
        description,
        award,
        award_type,
        starts_at,
        ends_at,
        conversions_limit,
        user_conversion_limit,
        activity_type_name
      )

      # Validate required parameters
      if name == nil
        raise ArgumentError.new "Required parameter 'name' cannot be nil."
      end
      if activity_type_name == nil
        raise ArgumentError.new "Required parameter 'name' cannot be nil."
      end

      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/campaigns'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'name' => name,
        'description' => description,
        'award' => award,
        'award_type' => award_type,
        'starts_at' => starts_at,
        'ends_at' => ends_at,
        'conversions_limit' => conversions_limit,
        'user_conversion_limit' => user_conversion_limit,
        'activity_type_name' => activity_type_name
      }

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'name' => name,
        'description' => description,
        'award' => award,
        'award_type' => award_type,
        'starts_at' => starts_at,
        'ends_at' => ends_at,
        'conversions_limit' => conversions_limit,
        'user_conversion_limit' => user_conversion_limit,
        'activity_type_name' => activity_type_name
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'Authorization' => 'Bearer %s' % (Configuration.o_auth_access_token)
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers

      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body) if not (_response.raw_body.nil? or _response.raw_body.to_s.strip.empty?)
      return decoded
    end
  end
end
